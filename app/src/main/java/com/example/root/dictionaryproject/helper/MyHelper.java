package com.example.root.dictionaryproject.helper;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteStatement;import android.util.Log;import java.util.ArrayList;import static android.provider.BaseColumns._ID;import static com.example.root.dictionaryproject.helper.MyDBContract.DictColumns.MEANING;import static com.example.root.dictionaryproject.helper.MyDBContract.DictColumns.WORD;import static com.example.root.dictionaryproject.helper.MyDBContract.KolomKamus.ARTI;import static com.example.root.dictionaryproject.helper.MyDBContract.KolomKamus.KATA;import static com.example.root.dictionaryproject.helper.MyDBContract.TABLE_ENG;import static com.example.root.dictionaryproject.helper.MyDBContract.TABLE_IND;public class MyHelper {    private Context context;    private MyDBHelper helper;    private SQLiteDatabase database;    public MyHelper(Context context) {        this.context = context;    }    //open sql connection    public MyHelper open() throws SQLException{        helper      = new MyDBHelper(context);        database    = helper.getWritableDatabase();        return this;    }    //close sql connection    public void close(){        helper.close();    }    //begin all transaction    public void beginTransaction(){        database.beginTransaction();    }    //set transaction proccess    public void setTransaction(){        database.setTransactionSuccessful();    }    //end transaction    public void endTransaction(){        database.endTransaction();    }    //insert English DB    public void insertTransactionENG(MyModel model){        String sql = "INSERT INTO "+TABLE_ENG+" ("+WORD+", "+MEANING+") VALUES (?, ?)";        SQLiteStatement statement = database.compileStatement(sql);        statement.bindString(1, model.getKata());        statement.bindString(2, model.getArti());        statement.execute();        statement.clearBindings();    }    //insert Indonesian DB    public void insertTransactionID(MyModel model){        String sql = "INSERT INTO "+TABLE_IND+" ("+KATA+", "+ARTI+") VALUES (?, ?)";        SQLiteStatement statement = database.compileStatement(sql);        statement.bindString(1, model.getKata());        statement.bindString(2, model.getArti());        statement.execute();        statement.clearBindings();    }    //get All English Data    public ArrayList<MyModel> getAllDataENG(){        Cursor cursor = database.query(TABLE_ENG, null, null, null, null, null, _ID+" ASC", null);        cursor.moveToFirst();        ArrayList<MyModel> models = new ArrayList<>();        MyModel model;        if (cursor.getCount() > 0){            do {                model = new MyModel();                model.setId(cursor.getInt(cursor.getColumnIndexOrThrow(_ID)));                model.setKata(cursor.getString(cursor.getColumnIndexOrThrow(WORD)));                model.setArti(cursor.getString(cursor.getColumnIndexOrThrow(MEANING)));                models.add(model);                cursor.moveToNext();            } while (!cursor.isAfterLast());        }        cursor.close();        return models;    }    //get All Indonesian Data    public ArrayList<MyModel> getAllData(){        Cursor cursor = database.query(TABLE_IND, null, null, null, null, null, _ID+" ASC", null);        cursor.moveToFirst();        ArrayList<MyModel> models = new ArrayList<>();        MyModel model;        if (cursor.getCount() > 0){            do {                model = new MyModel();                model.setId(cursor.getInt(cursor.getColumnIndexOrThrow(_ID)));                model.setKata(cursor.getString(cursor.getColumnIndexOrThrow(KATA)));                model.setArti(cursor.getString(cursor.getColumnIndexOrThrow(ARTI)));                models.add(model);                cursor.moveToNext();            } while (!cursor.isAfterLast());        }        cursor.close();        return models;    }    //get Data By Name (Only Indonesian) for search    public ArrayList<MyModel> getByName(String word){        String result = "";        String query = "SELECT * FROM "+TABLE_IND+" WHERE "+KATA+" LIKE '%"+word+"%'";        Cursor cursor = database.rawQuery(query, null);        cursor.moveToFirst();        ArrayList<MyModel> models = new ArrayList<>();        MyModel model;        if (cursor.getCount() > 0){            do {                model = new MyModel();                model.setId(cursor.getInt(cursor.getColumnIndexOrThrow(_ID)));                model.setKata(cursor.getString(cursor.getColumnIndexOrThrow(KATA)));                model.setArti(cursor.getString(cursor.getColumnIndexOrThrow(ARTI)));                models.add(model);                cursor.moveToNext();            } while (!cursor.isAfterLast());        }        cursor.close();        return models;    }    //get Data By Name (English version for search    public ArrayList<MyModel> getByNameENG(String word){        String result = "";        String query = "SELECT * FROM "+TABLE_ENG+" WHERE "+WORD+" LIKE '%"+word+"%'";        Cursor cursor = database.rawQuery(query, null);        cursor.moveToFirst();        ArrayList<MyModel> models = new ArrayList<>();        MyModel model;        if (cursor.getCount() > 0){            do {                model = new MyModel();                model.setId(cursor.getInt(cursor.getColumnIndexOrThrow(_ID)));                model.setKata(cursor.getString(cursor.getColumnIndexOrThrow(WORD)));                model.setArti(cursor.getString(cursor.getColumnIndexOrThrow(MEANING)));                models.add(model);                cursor.moveToNext();            } while (!cursor.isAfterLast());        }        cursor.close();        return models;    }    //insert standar query for indo    public long insert(MyModel myModel){        ContentValues initialValues =  new ContentValues();        initialValues.put(KATA, myModel.getKata());        initialValues.put(ARTI, myModel.getArti());        return database.insert(TABLE_IND, null, initialValues);    }    //insert standar query for english    public long insertENG(MyModel myModel){        ContentValues initialValues =  new ContentValues();        initialValues.put(WORD, myModel.getKata());        initialValues.put(MEANING, myModel.getArti());        return database.insert(TABLE_ENG, null, initialValues);    }    //update for indonesian    public int update(MyModel myModel){        ContentValues args = new ContentValues();        args.put(KATA, myModel.getKata());        args.put(ARTI, myModel.getArti());        return database.update(TABLE_IND, args, _ID + "= '" + myModel.getId() + "'", null);    }    //delete for indonesian    public int delete(int id){        return database.delete(TABLE_IND, _ID + " = '"+id+"'", null);    }    //update for english    public int updateENG(MyModel myModel){        ContentValues args = new ContentValues();        args.put(WORD, myModel.getKata());        args.put(MEANING, myModel.getArti());        return database.update(TABLE_ENG, args, _ID + "= '" + myModel.getId() + "'", null);    }    //delete for english    public int deleteENG(int id){        return database.delete(TABLE_ENG, _ID + " = '"+id+"'", null);    }}