package com.example.root.dictionaryproject;import android.annotation.SuppressLint;import android.content.Intent;import android.content.res.Resources;import android.os.AsyncTask;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.widget.ProgressBar;import com.example.root.dictionaryproject.helper.MyHelper;import com.example.root.dictionaryproject.helper.MyModel;import com.example.root.dictionaryproject.helper.MyPreferences;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;public class LoadingActivity extends AppCompatActivity {    ProgressBar progressBar;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_loading);        progressBar = (ProgressBar)findViewById(R.id.progress);        new Loading().execute();    }    @SuppressLint("StaticFieldLeak")    private class Loading extends AsyncTask<Void, Integer, Void>{        final String TAG = Loading.class.getSimpleName();        MyHelper helper;        MyPreferences preferences;        double progress;        double maxprogress = 100;        protected void onPreExecute(){            helper      = new MyHelper(LoadingActivity.this);            preferences = new MyPreferences(LoadingActivity.this);            Boolean running = preferences.getFirstRun();        }        @Override        protected Void doInBackground(Void... voids) {            Boolean firstRun = preferences.getFirstRun();            if (firstRun){                ArrayList<MyModel> modelID  = preLoad();                ArrayList<MyModel> modelENG = preLoadEnglish();                helper.open();                progress = 30;                publishProgress((int) progress);                Double progressMaxInsert = 80.0;                Double progressDiff = (progressMaxInsert - progress) / modelID.size();                helper.beginTransaction();                try {                    for (MyModel model : modelENG){                        helper.insertTransactionENG(model);                    }                    for (MyModel model : modelID){                        helper.insertTransactionID(model);                        progress += progressDiff;                        publishProgress((int) progress);                    }                    helper.setTransaction();                } catch (Exception e) {                    Log.e(TAG, "doInBackground : Exception");                }                helper.endTransaction();                helper.close();                preferences.setFirstRun(false);                publishProgress((int) maxprogress);            } else {                try {                    synchronized (this){                        this.wait(2000);                        publishProgress(50);                        this.wait(2000);                        publishProgress((int) maxprogress);                    }                } catch (Exception e){                }            }            return null;        }        protected void onProgressUpdate(Integer... values){            progressBar.setProgress(values[0]);        }        protected void onPostExecute(Void result){            Intent intent = new Intent(LoadingActivity.this, MainActivity.class);            startActivity(intent);            finish();        }    }    public ArrayList<MyModel> preLoad(){        ArrayList<MyModel> models = new ArrayList<>();        String line = null;        BufferedReader reader;        try{            Resources res = getResources();            InputStream inputStream = res.openRawResource(R.raw.indonesia_english);            reader = new BufferedReader(new InputStreamReader(inputStream));            int count = 0;            do {                line    = reader.readLine();                String[] split = line.split("\t");                MyModel model;                model   = new MyModel(split[0], split[1]);                models.add(model);                count++;            } while (line != null);        } catch (Exception e){            e.printStackTrace();        }        return models;    }    public ArrayList<MyModel> preLoadEnglish(){        ArrayList<MyModel> models = new ArrayList<>();        String line = null;        BufferedReader reader;        try{            Resources res = getResources();            InputStream inputStream = res.openRawResource(R.raw.english_indonesia);            reader = new BufferedReader(new InputStreamReader(inputStream));            int count = 0;            do {                line    = reader.readLine();                String[] split = line.split("\t");                MyModel model;                model   = new MyModel(split[0], split[1]);                models.add(model);                count++;            } while (line != null);        } catch (Exception e){            e.printStackTrace();        }        return models;    }}